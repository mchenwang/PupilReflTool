//===================================================
// Automatically generated by Pupil Reflection Tool
//===================================================

#ifndef __TEST__GEN_INL__
#define __TEST__GEN_INL__
namespace PRefl {
template<>
struct ReflData<TestCase1>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"_a">{}, &TestCase1::_a, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase3>
{
    constexpr static bool hasData = false;
    constexpr static bool hasBases = false;
};
template<typename T>
struct ReflData<TestCase4<T>>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a">{}, &TestCase4<T>::a, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase5::TestCase5Inner>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a_in">{}, &TestCase5::TestCase5Inner::a_in, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase5>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a">{}, &TestCase5::a, AttrArray {} }
    };
};
template<typename T>
struct ReflData<TestCase6::TestCase6Inner<T>>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a_in">{}, &TestCase6::TestCase6Inner<T>::a_in, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase6>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a">{}, &TestCase6::a, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase7::TestCase7Inner>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a_in">{}, &TestCase7::TestCase7Inner::a_in, AttrArray {} }
    };
};
template<typename T>
struct ReflData<TestCase7<T>>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a">{}, &TestCase7<T>::a, AttrArray {} }
    };
};
template<typename T1, typename T2>
struct ReflData<TestCase8Nsp::TestCase8<T1, T2>>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a">{}, &TestCase8Nsp::TestCase8<T1, T2>::a, AttrArray {} },
        Field { Name<"b">{}, &TestCase8Nsp::TestCase8<T1, T2>::b, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase8Nsp::TestCase8Nsp2::TestCase8_2>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a2">{}, &TestCase8Nsp::TestCase8Nsp2::TestCase8_2::a2, AttrArray {} }
    };
};
template<typename T1, typename T2>
struct ReflData<TestCase9<T1, T2>>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = true;
    constexpr static auto bases = ReflDataArray {
        ReflData<TestCase8Nsp::TestCase8Nsp2::TestCase8_2> {},
        ReflData<TestCase4<T2>> {}
    };
    constexpr static auto fields = FieldArray {
        Field { Name<"c">{}, &TestCase9<T1, T2>::c, AttrArray {} },
        Field { Name<"sc">{}, &TestCase9<T1, T2>::sc, AttrArray {} },
        Field { Name<"csc">{}, &TestCase9<T1, T2>::csc, AttrArray {} },
        Field { Name<"cc">{}, &TestCase9<T1, T2>::cc, AttrArray {} }
    };
};
template<typename T>
struct ReflData<TestCase10_no::TestCase10Inner<T>>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a_in">{}, &TestCase10_no::TestCase10Inner<T>::a_in, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase11>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"b">{}, &TestCase11::b, AttrArray {} },
        Field { Name<"t">{}, &TestCase11::t, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase12_1>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a">{}, &TestCase12_1::a, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase12_2>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"b">{}, &TestCase12_2::b, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase12_3>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = true;
    constexpr static auto bases = ReflDataArray {
        ReflData<TestCase12_1> {}
    };
    constexpr static auto fields = FieldArray {
        Field { Name<"c">{}, &TestCase12_3::c, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase12_4>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = true;
    constexpr static auto bases = ReflDataArray {
        ReflData<TestCase12_2> {}
    };
    constexpr static auto fields = FieldArray {
        Field { Name<"d">{}, &TestCase12_4::d, AttrArray {} }
    };
};
template<>
struct ReflData<TestCase13>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a">{}, &TestCase13::a, AttrArray {Attribute{ Name<"range">{}, std::make_pair(0, 1) }} }
    };
};
template<>
struct ReflData<TestCase14>
{
    constexpr static bool hasData = true;
    constexpr static bool hasBases = false;
    constexpr static auto fields = FieldArray {
        Field { Name<"a">{}, &TestCase14::a,
            AttrArray{
                Attribute{ Name<"range">{}, std::make_pair(1, 10.5) },
                Attribute{ Name<"step">{}, 0.5 },
                Attribute{ Name<"info">{}, "this is a info"}
            }
        }
    };
};
}
#endif
