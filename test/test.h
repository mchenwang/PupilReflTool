#pragma once

#define META clang::annotate("meta")
#define RANGE(a, b) clang::annotate("range", a, b)
#define INFO(str) clang::annotate("info", str)
#define STEP(step) clang::annotate("step", step)

// test 1
struct [[META]] TestCase1
{
    int a_no;
    [[META]] int _a;
};

// test 2
class TestCase2_no
{
    [[META]] int _a_no;
public:
    int a_no;
    [[META]] int _a;
};

// test 3
class [[META]] TestCase3
{
public:
    int a_no;
};

// test 4
template<typename T>
struct [[META]] TestCase4
{
    [[META]] T a;
};

// test 5
struct [[META]] TestCase5
{
    struct [[META]] TestCase5Inner
    {
        [[META]] int a_in;
    };

    [[META]] float a;
};

// test 6
struct [[META]] TestCase6
{
    template<typename T>
    struct [[META]] TestCase6Inner
    {
        [[META]] T a_in;
    };

    [[META]] float a;
};

// test 7
// 避免出现模板类的内部类
// 内部类的类型需要确定父类的模板类型，即 T 需要明确，而在自动生成反射阶段无法获取实例化的模板类型
// 会生成 Refl<TestCase7::TestCase7Inner>（生成阶段通过 但编译阶段报错）
template<typename T>
struct [[META]] TestCase7
{
    struct [[META]] TestCase7Inner
    {
        [[META]] int a_in;
    };

    [[META]] T a;
};

// test 8
namespace TestCase8Nsp
{
    template<typename T1, typename T2>
    struct [[META]] TestCase8
    {
        [[META]] T1 a;
        [[META]] T2 b;
    };

    namespace TestCase8Nsp2
    {
        struct [[META]] TestCase8_2
        {
            [[META]] int a2;
        };
    }
}

// test 9
template<typename T1, typename T2>
class [[META]] TestCase9 : public TestCase8Nsp::TestCase8Nsp2::TestCase8_2, public TestCase4<T2>
{
    T1 m_c_no;
public:
    [[META]] float c;
    [[META]] static int sc;
    [[META]] constexpr static int csc = 0;
    [[META]] const int cc;
};

// test 10
struct TestCase10_no
{
    template<typename T>
    struct [[META]] TestCase10Inner
    {
        [[META]] T a_in;
    };

    [[META]] float a;
};

// test 11
class [[META]] TestCase11
{
    [[META]] int a_no;
public:
    [[META]] int b;
private:
    [[META]] int c_no;
protected:
    [[META]] TestCase1 t_no;
public:
    [[META]] TestCase1 t;
};

// test 12
class [[META]] TestCase12_1
{
public:
    [[META]] int a;
};
class [[META]] TestCase12_2
{
public:
    [[META]] int b;
};
class [[META]] TestCase12_3 : public TestCase12_1
{
public:
    [[META]] int c;
};
class [[META]] TestCase12_4 : private TestCase12_1, public TestCase12_2
{
public:
    [[META]] int d;
};

// test 13
struct [[META]] TestCase13
{
    [[META, RANGE(0, 1)]] float a;
};

// test 14
struct [[META]] TestCase14
{
    [[META, RANGE(1, 10.5), STEP(0.5), INFO("this is a info")]]
    int a;
};

// auto generated by PupilReflTool
#include "generated/test.gen.inl"
